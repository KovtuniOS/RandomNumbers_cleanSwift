//
//  NumbersListInteractor.swift
//  RandomNubmbers
//
//  Created by Kovtun on 4/12/18.
//  Copyright (c) 2018 Kovtun. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol NumbersListBusinessLogic {
    func randomizeNumbers()
    func addRandomNumber()
    func deleteNumber(request: NumbersList.GeneratedNumbers.Request)
    func undoLastNumber()
}

protocol NumbersListDataStore {}

class NumbersListInteractor: NumbersListBusinessLogic, NumbersListDataStore {
    var presenter: NumbersListPresentationLogic?
    var worker: NumbersListWorker?
    var sortedNumbers: [Number] = []
    var deletedNumbers: [Number] = []
    
    // MARK: Do randomizing
    
    func randomizeNumbers() {
        worker = NumbersListWorker()

        ProgressLoader.show()
        DispatchQueue.global(qos: .userInitiated).async { [unowned self] in
            self.worker?.randomizeNumbers(completion: { numbers in
                self.sortedNumbers = numbers
                self.sortAndPresent()
            })
        }
    }

    func addRandomNumber() {
        worker = NumbersListWorker()

        ProgressLoader.show()
        DispatchQueue.global(qos: .userInitiated).async { [unowned self] in
            self.worker?.randomizeNumbers(completion: { numbers in
                if let number = self.worker?.addRandomNumber() {
                    sleep(2)
                    self.sortedNumbers.append(number)
                    self.sortAndPresent()
                }
            })
        }
    }

    func deleteNumber(request: NumbersList.GeneratedNumbers.Request) {
        deletedNumbers.append(sortedNumbers[request.indexDeletingNumber])
        sortedNumbers.remove(at: request.indexDeletingNumber)
        
        let response = NumbersList.GeneratedNumbers.Response(numbers: self.sortedNumbers)
        self.presenter?.presentNumbers(response: response)
    }
    
    func undoLastNumber() {
        if self.deletedNumbers.count != 0, let lastNumber = self.deletedNumbers.last {
            ProgressLoader.show(with: "Undo".localized + ": \(lastNumber.value)")
            
            DispatchQueue.global(qos: .userInitiated).async { [unowned self] in
                self.sortedNumbers.append(lastNumber)
                
                DispatchQueue.global(qos: .userInitiated).sync { [unowned self] in
                    self.deletedNumbers.removeLast()
                    sleep(2)
                    self.sortAndPresent()
                }
            }
        }
    }
}

//MARK: - private section

fileprivate extension NumbersListInteractor {
    func sortAndPresent() {
        self.sortedNumbers.sort { (n1, n2) -> Bool in
            return n2.value < n1.value
        }
        let response = NumbersList.GeneratedNumbers.Response(numbers: self.sortedNumbers)
        DispatchQueue.main.async { [unowned self] in
            self.presenter?.presentNumbers(response: response)
            ProgressLoader.hide()
        }
    }
}

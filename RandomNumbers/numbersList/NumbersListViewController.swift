//
//  NumbersListViewController.swift
//  RandomNubmbers
//
//  Created by Kovtun on 4/12/18.
//  Copyright (c) 2018 Kovtun. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol NumbersListDisplayLogic: class {
    func displayNumbers(viewModel: NumbersList.GeneratedNumbers.ViewModel)
}

class NumbersListViewController: UITableViewController, NumbersListDisplayLogic {
    private struct Constants {
        static let rowHeight: CGFloat = 44
    }
    private var displayedNumbers: [NumbersList.GeneratedNumbers.ViewModel.DisplayedNumber] = []
    
    var interactor: NumbersListBusinessLogic?
    var router: (NSObjectProtocol & NumbersListRoutingLogic & NumbersListDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return displayedNumbers.count
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let displayedNumber = displayedNumbers[indexPath.row]
        var cell: RandomNumberTableViewCell? = tableView.dequeueReusableCell(withIdentifier: "NumberTableViewCell") as? RandomNumberTableViewCell
        if cell == nil {
            cell = RandomNumberTableViewCell(style: .value1, reuseIdentifier: "NumberTableViewCell")
        }
        cell?.numberLabel.text = "\(displayedNumber.number)"
        
        return cell!
    }
    
    override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return Constants.rowHeight
    }
    
    override func tableView(_ tableView: UITableView, canEditRowAt indexPath: IndexPath) -> Bool {
        return true
    }
    
    override func tableView(_ tableView: UITableView, editingStyleForRowAt indexPath: IndexPath) -> UITableViewCellEditingStyle {
        return .delete
    }
    
    override func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCellEditingStyle, forRowAt indexPath: IndexPath) {
        if editingStyle == .delete {
            let request = NumbersList.GeneratedNumbers.Request(indexDeletingNumber: indexPath.row)
            interactor?.deleteNumber(request: request)
        }
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = NumbersListInteractor()
        let presenter = NumbersListPresenter()
        let router = NumbersListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        generateNumbers()
    }
    
    @IBAction func addNumbers(_ sender: Any) {
        addNumber()
    }
    
    @IBAction func undoAction(_ sender: Any) {
        undoLastNumber()
    }
    
    // MARK: generate numbers
    
    func generateNumbers() {
        interactor?.randomizeNumbers()
    }

    func addNumber() {
        interactor?.addRandomNumber()
    }
    
    func displayNumbers(viewModel: NumbersList.GeneratedNumbers.ViewModel) {
        displayedNumbers = viewModel.displayedNumbers
        tableView.reloadData()
    }
    
    func undoLastNumber() {
        interactor?.undoLastNumber()
    }
}
